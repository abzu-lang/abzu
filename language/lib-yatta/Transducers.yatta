module Transducers exports filter, map, drop, take, dedupe, distinct, chunk as

# pred: function of one argument (element) returning boolean value
# init: initial state
# step: function of two arguments (accumulator, element) returning new value of the accumulator
# complete: function of one argument (final state of accumulator) returning final return value
filter pred (init, step, complete) = let
  new_step = \acc val -> if pred val then step acc val else acc
in
  (\-> init, new_step, complete)


# fun: function of one argument (element)
# init: initial state
# step: function of two arguments (accumulator, element) returning new value of the accumulator
# complete: function of one argument (final state of accumulator) returning final return value
map fun (init, step, complete) = let
  new_step = \acc val -> step acc (fun val)
in
  (\ -> init, new_step, complete)


# n: number of elements to drop
# init: initial state
# step: function of two arguments (accumulator, element) returning new value of the accumulator
# complete: function of one argument (final state of accumulator) returning final return value
drop n (init, step, complete)
  | n >= 0 = let
    new_step     = \(i, acc) val -> if i != 0 then (i - 1, acc) else (0, step acc val)
    new_complete = \(0, acc) -> complete acc
  in
    (\-> (n, init), new_step, new_complete)


# n: number of elements to take
# init: initial state
# step: function of two arguments (accumulator, element) returning new value of the accumulator
# complete: function of one argument (final state of accumulator) returning final return value
take n (init, step, complete)
  | n >= 0 = let
    new_step     = \(i, acc) val -> if i == 0 then done else (i - 1, step acc val)
    new_complete = \(0, acc) -> complete acc
  in
    (\-> (n, init), new_step, new_complete)


# init: initial state
# step: function of two arguments (accumulator, element) returning new value of the accumulator
# complete: function of one argument (final state of accumulator) returning final return value
dedupe (init, step, complete) = let
  new_step = \(prev, acc) val -> if val != prev then (val, step acc val) else (prev, acc)
  new_complete = \(_, acc) -> complete acc
in
  (\-> ((), init), new_step, new_complete)


# init: initial state
# step: function of two arguments (accumulator, element) returning new value of the accumulator
# complete: function of one argument (final state of accumulator) returning final return value
distinct (init, step, complete) = let
  new_step = \(set, acc) val -> if val in set then (set, acc) else (set ++ val, step acc val)
  new_complete = \(_, acc) -> complete acc
in
  (\-> (Set::empty, init), new_step, new_complete)

# n: max number of elements in chunk
# init: initial state
# step: function of two arguments (accumulator, element) returning new value of the accumulator
# complete: function of one argument (final state of accumulator) returning final return value
chunk n (init, step, complete)
  | n > 0 = let
    new_step = \(seq, acc) val -> if Seq::len seq == n then ([val], step acc seq) else (seq :> val, acc)
    new_complete = \(seq, acc) -> if Seq::len seq == 0 then complete acc else complete <| step acc seq
  in
    (\-> ([], init), new_step, new_complete)