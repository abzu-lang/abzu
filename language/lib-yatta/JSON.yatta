module JSON exports generate as
    generate () = "null"
    generate val
        | Types::is_char val = "\"{val}\""
        | Types::is_function val = raise :nomatch "Functions cannot be serialized to JSON"
        | Types::is_tuple val = generate <| Tuple::to_seq val
        | Types::is_module val = raise :nomatch "Modules cannot be serialized to JSON"
        | Types::is_seq val && Seq::is_string val = "\"{val}\""
        | Types::is_seq val = "[{let (res, _) = Seq::foldl val element_fold ("", Seq::len val) in res}]"
        | Types::is_dict val = "{{{let (res, _) = Dict::fold val key_val_fold ("", Dict::len val) in res}}}"
        | Types::is_set val = "[{let (res, _) = Set::fold val element_fold ("", Set::len val) in res}]"
        | Types::is_native val = raise :nomatch "Native Objects cannot be serialized to JSON"
        | Types::is_symbol val = "\"{val}\""
        | true = "{val}"

    element_fold (acc, remains) el = let
        g = generate el
      in
        ("{acc}{g}" ++ if remains > 1 then ", " else "", remains - 1)

    key_val_fold (acc, remains) (key, val) = let
        gkey = generate key
        gval = generate val
      in
        ("{acc}{gkey}: {gval}" ++ if remains > 1 then ", " else "", remains - 1)
end
